name: Security Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  static-analysis:
    name: Static Code Analysis (Gosec + Semgrep)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21] # ajuste conforme necessÃ¡rio
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Prepare reports directory
        run: mkdir -p reports

      - name: Run gosec (Go security linter)
        run: |
          if [ -f go.mod ]; then
            curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $HOME/bin latest
            $HOME/bin/gosec ./... -fmt=json -out=reports/gosec-report.json || true
          else
            echo "{}" > reports/gosec-report.json
          fi

      - name: Run Semgrep
        run: |
          pip install semgrep
          semgrep --config=auto --error --json > reports/semgrep-report.json || true

      - name: Upload Gosec report
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report-${{ matrix.go-version }}
          path: reports/gosec-report.json

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report-${{ matrix.go-version }}
          path: reports/semgrep-report.json

  gitleaks:
    name: Secrets Scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare reports directory
        run: mkdir -p reports

      - name: Run Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          ./gitleaks detect --source=. --report-format=json --report-path reports/gitleaks-report.json || true
          cat reports/gitleaks-report.json
          if [ ! -f reports/gitleaks-report.json ]; then
            echo "{}" > reports/gitleaks-report.json
          fi

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: reports/gitleaks-report.json

  trufflehog:
    name: Secrets Scanning (TruffleHog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare reports directory
        run: mkdir -p reports

      - name: Run TruffleHog
        run: |
          pip install trufflehog
          trufflehog filesystem . --json > reports/trufflehog-report.json || true
          cat reports/trufflehog-report.json
          if [ ! -f reports/trufflehog-report.json ]; then
            echo "{}" > reports/trufflehog-report.json
          fi

      - name: Upload TruffleHog report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: reports/trufflehog-report.json

  deps:
    name: Dependency Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare reports directory
        run: mkdir -p reports

      - name: Run Trivy on source code
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin
          $HOME/bin/trivy fs --security-checks vuln,config --exit-code 0 --format json -o reports/trivy-report.json .

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: reports/trivy-report.json
