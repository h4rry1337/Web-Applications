name: Security Pipeline Scan with SARIF

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  sast:
    name: Static Code Analysis (Gosec + Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Prepare reports directory
        run: mkdir -p reports sarif-reports

      # ---- Gosec com SARIF ----
      - name: Install Gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo -e "\033[1;32m✓ Gosec installed\033[0m"

      - name: Verify Gosec installation
        run: |
          which gosec
          gosec version

      - name: Run Gosec with SARIF output
        if: hashFiles('**/*.go') != ''
        run: |
          echo -e "\033[1;34m▶ Running Gosec...\033[0m"
          
          # Gera JSON
          gosec -fmt=json -out=reports/gosec-report.json ./... || true
          
          # Gera SARIF
          gosec -fmt=sarif -out=sarif-reports/gosec.sarif ./... || true
          
          # Fallback para arquivos vazios
          [ ! -f reports/gosec-report.json ] && echo '{"Issues":[],"Stats":{}}' > reports/gosec-report.json
          [ ! -f sarif-reports/gosec.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Gosec","version":"2.0"}},"results":[]}]}' > sarif-reports/gosec.sarif
          
          echo -e "\033[1;32m✓ Gosec scan finished\033[0m"
          [ -f sarif-reports/gosec.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/gosec.sarif) bytes"

      - name: Upload Gosec SARIF to GitHub Security
        if: hashFiles('**/*.go') != '' && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/gosec.sarif
          category: gosec

      # ---- Semgrep com SARIF ----
      - name: Install Semgrep
        run: |
          python3 -m pip install --upgrade pip
          pip install semgrep
          echo -e "\033[1;32m✓ Semgrep installed\033[0m"

      - name: Verify Semgrep installation
        run: |
          which semgrep
          semgrep --version

      - name: Run Semgrep with SARIF output
        run: |
          echo -e "\033[1;34m▶ Running Semgrep...\033[0m"
          
          # Gera JSON
          semgrep --config=auto --json --output=reports/semgrep-report.json || true
          
          # Gera SARIF
          semgrep --config=auto --sarif --output=sarif-reports/semgrep.sarif || true
          
          # Fallback para arquivos vazios
          [ ! -f reports/semgrep-report.json ] && echo '{"results":[]}' > reports/semgrep-report.json
          [ ! -f sarif-reports/semgrep.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Semgrep","version":"1.0"}},"results":[]}]}' > sarif-reports/semgrep.sarif
          
          echo -e "\033[1;32m✓ Semgrep scan finished\033[0m"
          [ -f sarif-reports/semgrep.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/semgrep.sarif) bytes"

      - name: Upload Semgrep SARIF to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/semgrep.sarif
          category: semgrep

      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            reports/
            sarif-reports/

  secrets:
    name: Secrets Scanning (Gitleaks + TruffleHog)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare reports directory
        run: mkdir -p reports sarif-reports

      # ---- Gitleaks com SARIF ----
      - name: Install Gitleaks
        run: |
          GITLEAKS_VERSION="8.21.2"
          wget -q "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          tar -xzf gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz
          echo -e "\033[1;32m✓ Gitleaks installed\033[0m"

      - name: Verify Gitleaks installation
        run: |
          which gitleaks
          gitleaks version

      - name: Run Gitleaks with SARIF output
        run: |
          echo -e "\033[1;34m▶ Running Gitleaks...\033[0m"
          
          # Gera JSON
          gitleaks detect --source=. --report-format=json --report-path=reports/gitleaks-report.json --no-git --exit-code=0 || true
          
          # Gera SARIF
          gitleaks detect --source=. --report-format=sarif --report-path=sarif-reports/gitleaks.sarif --no-git --exit-code=0 || true
          
          # Fallback para arquivos vazios
          [ ! -f reports/gitleaks-report.json ] && echo '[]' > reports/gitleaks-report.json
          [ ! -f sarif-reports/gitleaks.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Gitleaks","version":"8.0"}},"results":[]}]}' > sarif-reports/gitleaks.sarif
          
          echo -e "\033[1;32m✓ Gitleaks scan finished\033[0m"
          [ -f sarif-reports/gitleaks.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/gitleaks.sarif) bytes"

      - name: Upload Gitleaks SARIF to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/gitleaks.sarif
          category: gitleaks

      # ---- TruffleHog com conversão para SARIF ----
      - name: Install TruffleHog (via binary)
        run: |
          TRUFFLEHOG_VERSION="3.82.13"
          wget -q "https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION}_linux_amd64.tar.gz"
          tar -xzf trufflehog_${TRUFFLEHOG_VERSION}_linux_amd64.tar.gz
          sudo mv trufflehog /usr/local/bin/
          rm trufflehog_${TRUFFLEHOG_VERSION}_linux_amd64.tar.gz
          echo -e "\033[1;32m✓ TruffleHog installed\033[0m"

      - name: Verify TruffleHog installation
        run: |
          which trufflehog
          trufflehog --version

      - name: Run TruffleHog with JSON output
        run: |
          echo -e "\033[1;34m▶ Running TruffleHog...\033[0m"
          
          # TruffleHog v3 usa 'filesystem' sem --directory
          trufflehog filesystem . --json --no-update > reports/trufflehog-report.json || true
          
          # Fallback para arquivo vazio
          [ ! -f reports/trufflehog-report.json ] && echo "" > reports/trufflehog-report.json
          
          echo -e "\033[1;32m✓ TruffleHog scan finished\033[0m"

      - name: Convert TruffleHog to SARIF
        run: |
          cat > convert_trufflehog_to_sarif.py << 'EOF'
import json
import sys
from pathlib import Path

def convert_to_sarif(input_file, output_file):
    try:
        with open(input_file, 'r') as f:
            content = f.read()
            if not content.strip():
                trufflehog_results = []
            else:
                # TruffleHog outputs one JSON per line
                trufflehog_results = [json.loads(line) for line in content.splitlines() if line.strip()]
    except Exception as e:
        print(f"Error reading TruffleHog results: {e}")
        trufflehog_results = []

    sarif = {
        "version": "2.1.0",
        "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
        "runs": [{
            "tool": {
                "driver": {
                    "name": "TruffleHog",
                    "version": "3.0",
                    "informationUri": "https://github.com/trufflesecurity/trufflehog",
                    "rules": []
                }
            },
            "results": []
        }]
    }
    
    rules_map = {}
    
    for finding in trufflehog_results:
        if not isinstance(finding, dict):
            continue
        
        # Extrair informações do finding
        detector_name = finding.get("DetectorName", finding.get("detector_name", "unknown"))
        source_metadata = finding.get("SourceMetadata", finding.get("source_metadata", {}))
        
        # Criar regra única para cada tipo de detector
        if detector_name not in rules_map:
            rule = {
                "id": f"trufflehog/{detector_name}",
                "name": detector_name,
                "shortDescription": {
                    "text": f"Secret detected by {detector_name}"
                },
                "fullDescription": {
                    "text": f"TruffleHog detected a potential secret using the {detector_name} detector"
                },
                "defaultConfiguration": {
                    "level": "error"
                },
                "properties": {
                    "tags": ["security", "secrets"]
                }
            }
            rules_map[detector_name] = rule
            sarif["runs"][0]["tool"]["driver"]["rules"].append(rule)
        
        # Extrair localização do arquivo
        data = source_metadata.get("Data", source_metadata.get("data", {}))
        
        # TruffleHog v3 structure
        file_path = "unknown"
        line_number = 1
        
        if "Filesystem" in data or "filesystem" in data:
            filesystem = data.get("Filesystem", data.get("filesystem", {}))
            file_path = filesystem.get("file", filesystem.get("File", "unknown"))
            line_number = filesystem.get("line", filesystem.get("Line", 1))
        elif "Git" in data or "git" in data:
            git_data = data.get("Git", data.get("git", {}))
            file_path = git_data.get("file", git_data.get("File", "unknown"))
            line_number = git_data.get("line", git_data.get("Line", 1))
        
        # Criar resultado
        result = {
            "ruleId": f"trufflehog/{detector_name}",
            "level": "error",
            "message": {
                "text": f"Potential secret found: {detector_name}"
            },
            "locations": [{
                "physicalLocation": {
                    "artifactLocation": {
                        "uri": file_path
                    },
                    "region": {
                        "startLine": int(line_number) if line_number else 1
                    }
                }
            }]
        }
        
        sarif["runs"][0]["results"].append(result)
    
    # Salvar SARIF
    with open(output_file, 'w') as f:
        json.dump(sarif, f, indent=2)
    
    print(f"✓ Converted {len(sarif['runs'][0]['results'])} findings to SARIF")

if __name__ == "__main__":
    convert_to_sarif("reports/trufflehog-report.json", "sarif-reports/trufflehog.sarif")
EOF
          
          python3 convert_trufflehog_to_sarif.py
          
          # Fallback se conversão falhar
          [ ! -f sarif-reports/trufflehog.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"TruffleHog","version":"3.0"}},"results":[]}]}' > sarif-reports/trufflehog.sarif
          
          echo -e "\033[1;32m✓ TruffleHog SARIF conversion finished\033[0m"
          [ -f sarif-reports/trufflehog.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/trufflehog.sarif) bytes"

      - name: Upload TruffleHog SARIF to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/trufflehog.sarif
          category: trufflehog

      - name: Upload Secrets reports
        uses: actions/upload-artifact@v4
        with:
          name: secrets-reports
          path: |
            reports/
            sarif-reports/

  deps:
    name: Dependency & IaC Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare reports directory
        run: mkdir -p reports sarif-reports

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          echo -e "\033[1;32m✓ Trivy installed\033[0m"

      - name: Verify Trivy installation
        run: |
          which trivy
          trivy --version

      # ---- Trivy Dependencies com SARIF ----
      - name: Run Trivy for Dependencies
        run: |
          echo -e "\033[1;34m▶ Running Trivy for Dependencies...\033[0m"
          
          # Gera JSON
          trivy fs --scanners vuln --exit-code 0 --format json --output reports/trivy-deps.json . || true
          
          # Gera SARIF
          trivy fs --scanners vuln --exit-code 0 --format sarif --output sarif-reports/trivy-deps.sarif . || true
          
          # Fallback para arquivos vazios
          [ ! -f reports/trivy-deps.json ] && echo '{"Results":[]}' > reports/trivy-deps.json
          [ ! -f sarif-reports/trivy-deps.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Trivy","version":"0.50.0"}},"results":[]}]}' > sarif-reports/trivy-deps.sarif
          
          echo -e "\033[1;32m✓ Trivy deps scan finished\033[0m"
          [ -f sarif-reports/trivy-deps.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/trivy-deps.sarif) bytes"

      - name: Upload Trivy Dependencies SARIF to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/trivy-deps.sarif
          category: trivy-dependencies

      # ---- Trivy IaC com SARIF ----
      - name: Run Trivy for IaC Misconfigs
        run: |
          echo -e "\033[1;34m▶ Running Trivy for IaC Misconfigs...\033[0m"
          
          # Gera JSON
          trivy fs --scanners misconfig --exit-code 0 --format json --output reports/trivy-iac.json . || true
          
          # Gera SARIF
          trivy fs --scanners misconfig --exit-code 0 --format sarif --output sarif-reports/trivy-iac.sarif . || true
          
          # Fallback para arquivos vazios
          [ ! -f reports/trivy-iac.json ] && echo '{"Results":[]}' > reports/trivy-iac.json
          [ ! -f sarif-reports/trivy-iac.sarif ] && echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"Trivy","version":"0.50.0"}},"results":[]}]}' > sarif-reports/trivy-iac.sarif
          
          echo -e "\033[1;32m✓ Trivy IaC scan finished\033[0m"
          [ -f sarif-reports/trivy-iac.sarif ] && echo "SARIF file size: $(wc -c < sarif-reports/trivy-iac.sarif) bytes"

      - name: Upload Trivy IaC SARIF to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-reports/trivy-iac.sarif
          category: trivy-iac

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            reports/
            sarif-reports/

  consolidate-results:
    name: Consolidate Security Results
    runs-on: ubuntu-latest
    needs: [sast, secrets, deps]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: List downloaded files
        run: |
          echo "📦 Downloaded artifacts:"
          find all-reports -type f -name "*.sarif" -exec echo "  - {}" \;

      - name: Create consolidated SARIF report
        run: |
          mkdir -p consolidated
          
          cat > consolidate_sarif.py << 'EOF'
import json
import os
from pathlib import Path

def merge_sarif_files(directory, output_file):
    consolidated = {
        "version": "2.1.0",
        "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
        "runs": []
    }
    
    sarif_files = list(Path(directory).rglob("*.sarif"))
    print(f"🔍 Found {len(sarif_files)} SARIF files")
    
    for sarif_file in sarif_files:
        try:
            with open(sarif_file, 'r') as f:
                data = json.load(f)
                if "runs" in data and data["runs"]:
                    for run in data["runs"]:
                        tool_name = run.get("tool", {}).get("driver", {}).get("name", sarif_file.stem)
                        results_count = len(run.get("results", []))
                        print(f"  ✓ {tool_name}: {results_count} findings")
                        consolidated["runs"].append(run)
        except Exception as e:
            print(f"  ✗ Error processing {sarif_file}: {e}")
    
    with open(output_file, 'w') as f:
        json.dump(consolidated, f, indent=2)
    
    total_results = sum(len(run.get("results", [])) for run in consolidated["runs"])
    total_tools = len(consolidated["runs"])
    
    print(f"\n📊 Security Scan Summary:")
    print(f"   • Tools executed: {total_tools}")
    print(f"   • Total findings: {total_results}")
    
    return total_results, total_tools

if __name__ == "__main__":
    total, tools = merge_sarif_files("all-reports", "consolidated/all-findings.sarif")
    
    # Save summary
    with open("consolidated/summary.txt", "w") as f:
        f.write(f"Total Tools: {tools}\n")
        f.write(f"Total Findings: {total}\n")
EOF
          
          python3 consolidate_sarif.py

      - name: Upload consolidated SARIF
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: consolidated/

      - name: Create Security Summary
        run: |
          TOTAL_FINDINGS=$(cat consolidated/summary.txt | grep "Total Findings" | cut -d: -f2 | tr -d ' ')
          TOTAL_TOOLS=$(cat consolidated/summary.txt | grep "Total Tools" | cut -d: -f2 | tr -d ' ')
          
          cat > security-summary.md << EOF
# 🔐 Security Scan Results

## Scan Execution
- **Branch:** \`${{ github.ref_name }}\`
- **Commit:** \`${{ github.sha }}\`
- **Workflow Run:** #${{ github.run_number }}
- **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## Tools Executed
- ✅ **SAST:** Gosec, Semgrep
- ✅ **Secrets:** Gitleaks, TruffleHog  
- ✅ **Dependencies:** Trivy
- ✅ **IaC:** Trivy Misconfig

## Summary
- **Total Tools:** ${TOTAL_TOOLS}
- **Total Findings:** ${TOTAL_FINDINGS}

## View Results
📍 Check the **Security** tab in your repository for detailed findings.

All SARIF reports have been uploaded and are available for review in the workflow artifacts.
EOF
          
          cat security-summary.md
          echo "TOTAL_FINDINGS=${TOTAL_FINDINGS}" >> $GITHUB_ENV

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
